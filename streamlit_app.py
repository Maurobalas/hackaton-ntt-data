import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import pickle

# T√≠tulo principal de la aplicaci√≥n
st.title("üìä Predicci√≥n de Ingresos (>50K o ‚â§50K)")

# Cargar el modelo y el escalador previamente entrenados
def load_model():
    with open("modelo_income.pkl", "rb") as file:
        model = pickle.load(file)
    return model

def load_scaler():
    with open("scaler_income.pkl", "rb") as file:
        scaler = pickle.load(file)
    return scaler

# Preprocesamiento de datos
def preprocess_data(df):
    # Transformar variables categ√≥ricas en num√©ricas con One-Hot Encoding
    df = pd.get_dummies(df, columns=["workclass", "education", "marital.status", "occupation", "relationship", "race", "sex"], drop_first=True)
    
    # Transformar native.country en variable binaria
    df["native_usa"] = df["native.country"].apply(lambda x: 1 if x == "United-States" else 0)
    df.drop(columns=["native.country"], inplace=True)
    
    # Transformar age y hours.per.week en categor√≠as
    age_bins = [0, 25, 40, 60, 100]
    age_labels = ["Joven", "Adulto Joven", "Adulto Medio", "Mayor"]
    df["age_category"] = pd.cut(df["age"], bins=age_bins, labels=age_labels, right=True)
    
    hours_bins = [0, 20, 40, 60, 100]
    hours_labels = ["Tiempo Parcial", "Jornada Normal", "Horas Extras", "Trabajo Extremo"]
    df["hours_category"] = pd.cut(df["hours.per.week"], bins=hours_bins, labels=hours_labels, right=True)
    
    # Devolver el DataFrame procesado sin las categor√≠as
    return df.drop(columns=["age_category", "hours_category"])

# Barra lateral para la navegaci√≥n entre p√°ginas
page = st.sidebar.radio("Menu", ["Introducci√≥n", "EDA", "Predicci√≥n del Modelo"])

# P√°gina: Introducci√≥n
if page == "Introducci√≥n":
    st.header("Introducci√≥n")
    st.write("Esta aplicaci√≥n permite predecir si una persona tiene ingresos mayores o menores a $50K bas√°ndose en sus caracter√≠sticas demogr√°ficas y laborales.")

# P√°gina: An√°lisis Exploratorio de Datos (EDA)
elif page == "EDA":
    st.header("Exploratory Data Analysis")
    
    uploaded_file = st.file_uploader("Sube un archivo CSV con los datos", type=["csv"])
    if uploaded_file is not None:
        df = pd.read_csv(uploaded_file)
        st.write("Vista previa del dataset:")
        st.write(df.head())

        # Mostrar estad√≠sticas descriptivas
        st.subheader("Estad√≠sticas Descriptivas")
        st.write(df.describe())

        # Gr√°ficos de distribuci√≥n
        st.subheader("Distribuci√≥n de ingresos por categor√≠a")
        fig, ax = plt.subplots(figsize=(6, 4))
        sns.countplot(x=df["income"], palette="coolwarm", ax=ax)
        st.pyplot(fig)

        # Matriz de correlaci√≥n
        st.subheader("Matriz de Correlaci√≥n")
        numeric_df = df.select_dtypes(include=['number'])
        fig, ax = plt.subplots(figsize=(8, 6))
        sns.heatmap(numeric_df.corr(), annot=True, cmap="coolwarm", fmt=".2f", ax=ax)
        st.pyplot(fig)

# P√°gina: Predicci√≥n del Modelo
elif page == "Predicci√≥n del Modelo":
    st.header("Predicci√≥n del Modelo")
    uploaded_file = st.file_uploader("Sube un archivo CSV con los datos", type=["csv"])
    if uploaded_file is not None:
        df = pd.read_csv(uploaded_file)
        st.write("Vista previa del dataset:")
        st.write(df.head())
        
        # Preprocesar los datos
        df_processed = preprocess_data(df)
        
        # Cargar modelo y escalador
        model = load_model()
        scaler = load_scaler()

        # Escalar las caracter√≠sticas
        df_scaled = scaler.transform(df_processed)
        
        # Hacer predicci√≥n
        predictions = model.predict(df_scaled)
        
        # Mostrar resultados
        df["Predicci√≥n"] = [">50K" if p == 1 else "‚â§50K" for p in predictions]
        st.write("Resultados de la predicci√≥n:")
        st.write(df[["age", "workclass", "education", "hours.per.week", "Predicci√≥n"]])
        
        # Descargar resultados
        st.download_button(label="Descargar Predicciones", data=df.to_csv(index=False), file_name="predicciones.csv", mime="text/csv")
